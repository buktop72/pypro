"""
1. Необходимо реализовать класс Stack со следующими методами:
isEmpty - проверка стека на пустоту. Метод возвращает True или False.
push - добавляет новый элемент на вершину стека. Метод ничего не возвращает.
pop - удаляет верхний элемент стека. Стек изменяется. Метод возвращает верхний элемент стека
peek - возвращает верхний элемент стека, но не удаляет его. Стек не меняется.
size - возвращает количество элементов в стеке.
2. Используя стек из задания 1 необходимо решить задачу на проверку сбалансированности скобок. Сбалансированность скобок означает, что каждый открывающий символ имеет соответствующий ему закрывающий, и пары скобок правильно вложены друг в друга.
Пример сбалансированных последовательностей скобок:
(((([{}]))))
[([])((([[[]]])))]{()}
{{[()]}}
Несбалансированные последовательности:
}{}
{{[(])]}}
[[{())}]
Программа ожидает на вход строку со скобками. На выход сообщение: "Сбалансированно", если строка корректная, и "Несбалансированно", если строка составлена неверно.
"""
class Stack:
    def __init__(self):
        self.array = []
    def isEmpty(self):
        return self.array == 0
    def push(self,item):
        self.array.append(item)
    def pop(self):
        z = self.array.pop()
        return z    
    def peek(self):
        return self.array[len(self.array) - 1]
    def size(self):
        return len(self.array)

def balance(line):
    opening = ['(', '[', '{']
    сlosure = {')': '(', ']': '[', '}': '{'} # словарь соответсвия откр. и закр. скобок
    massiv = Stack()
    for i in line:   
        if i in opening:
            massiv.push(i)
        elif massiv.size() == 0:            # если скобка закр., а массисв пуст, то "Несбалансированно"
            return "Несбалансированно"
        else:
            if сlosure[i] == massiv.peek(): # если закр. соответствует откр. в стеке, 
                massiv.pop()                # то удаляем последнюю
            else:
                return "Несбалансированно"  # усли не соответствует, то "Несбалансированно"          
    if massiv.size() == 0:
        return "Cбалансированно"
    else:
        return "Несбалансированно"

if __name__ == '__main__':
    ls_line = ['(((([{}]))))', '[([])((([[[]]])))]{()}', '{{[()]}}', '}{}', '{{[(])]}}', '[[{())}]']
    for line in ls_line:
        print(line)
        print(balance(line), '\n')
       


